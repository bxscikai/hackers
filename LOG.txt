************** Meeting Log ***********

-March 3

Attendees: Tiffany, Chenkai
Comment/Notes: 
We stripped the current code of the tic-tac-toe logic and left the skeletal template for our new capture the flag game. 
We then worked on taking the input map file and parsing it into an organized data structure. We also defined all the new data structures such as Maze, Game, Player and Object required for the game as well as defining new constants. 
We also added marshalling and unmarshalling functions associated with these new data structures.

ToDo: Getting the ascii map sent across to the client and getting the client to parse the received map into the Maze struct.

-March 30

Attendees: Tiffany, Chenkai, Eric
Comment/Notes: 
Discussed game details and ironed out unambiguous aspects of the game, such as player winning conditions, how items are picked up and dropped, how player tagging and freeing works, and the architecture of the implementation. Updated documentation to reflect these new clarifications. Data structures are also changed to reflect the final agreement of game semantics. 

Question: How do we split up the work? UI is an area that can be easily detached for an individual to work on, but we are not sure how to divide up the game logic between the two other members of the group since so many things are dependent on other things.

-April 2
Attendees: Tiffany, Chenkai, Eric
Comment/Notes: 
We met up to attempt to get to the next milestone, getting 'move' working so we can divide up the game logic more easily between Chenkai and Eric. Tiffany was able to get the UI to display the map correctly, the map also follows one player, allowing the player to move around the map. We were able to finish the 'start game' and 'move'. We then divided up the game logic between Chenkai and Eric. Chenkai was assigned to work on collision detection, jackhammer usage and win conditions, and player disconnect. Eric was assigned to work on item drop/pickup and player tagging/jailing.
We hit a very concrete milestone today because we were able to clearly divide up the work, enabling us to work on the same project concurrently.

ToDo: Getting the core game logic to work, UI item drawing and printing more players

-April 9
Attendees: Tiffany, Chenkai
Comment/Notes:
Met up to solve an UI issue that prevented many players from being drawn at the same time.   The problem was that we are unable to add the UI data structure into the Player struct due to import errors. We figured out the possible solution to this problem by using a void* to hold the UI object, then casting it into the correct data structure when we need to access its fields. Chenkai also worked on getting the jackhammer usage to work and was able to complete its implementation. 

ToDo: Solve the UI issue to allow many players to be printed at the same time.


-April 17
Attendees: Tiffany, Chenkai, Eric
Comment/Notes:
Met up to update eachother on project progress as well as continuing to implement game features. Chenkai worked on gameOver conditions and created graphics to notify the user has won/lost the game. Tiffany implemented the UI changes associated with Win/Lose situations to display these graphics, also disabling user input after the game has ended. Eric completed the tagging, jailing, and freeing. All features are tested and working.

ToDo: The game is pretty much done at this point, we just need to test this game with multiple players on different machines to make sure the performance is okay when playing remotely.

-April 19
Attenddes: Tiffany, Chenkai
Comment/Notes:
Tested the game on two different machines. 
Approach: Create server on one machine, start 2 clients on one machine and have another machine start another 2 clients and connecting using the IP of the first machine. 
We played a few games and tested the following:
a. connection and spawn players - SUCCESS
b. pickup and drop of items - SUCCESS
c. use of jackhammer - SUCESS
d. tagging and freeing - SUCESS
e. win condition - SUCESS
f. collision detection - SUCCESS

However, a few issues were discoverd:
-There is a slight tagging bug, if teamA player goes inside teamA's jail and try to move near a jailed player on from teamB, the teamB players is still tagable even though he is already in jail. The effect is that he moves around within the jail since its being randomly spawned again in JailB when TeamA player tags him inside the jail. 
-Disconnecting players doesn't delete these players
-We need to differentiate Floor1 and Floor2 tiles, Floor2 tiles will be given a different tint color so players will know which side they are currently on (to make tagging more intentional)
- Movement is laggy on the machine that is not running the server, is this an optimization issue and we need to find the bottleneck

-April 28th
